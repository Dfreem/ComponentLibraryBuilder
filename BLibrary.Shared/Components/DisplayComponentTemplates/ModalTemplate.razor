@using Blibrary.Shared.Components.Modal
@using Blibrary.Shared.Models
@implements IDisplayComponentTemplate

<!-- Button trigger modal -->
<div class="container-fluid">
    <div class="row">
        <div class="col">
            @if (HasFooter)
            {

                <Modal Class='@($"display-modal {VisibilityClass}")' Id="template-modal" Backdrop="Modal.BackdropOptions.False">
                    <ModalHeader>
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                        <button @onclick="Hide" type="button" class="btn-close" aria-label="Close"></button>

                    </ModalHeader>
                    <ModalBody>
                        <div class="row">
                            <div class="col">
                                Modal Variables: <br />
                            </div>
                        </div>

                        @foreach (var item in Variables.Where(v => v.SectionTitle == "modal"))
                        {
                            <div class="row">
                                <div class="col">
                                    @item.SectionTitle
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="d-flex flex-wrap">
                                        @((MarkupString)item.ToCssSection(false).Replace(";", ";<br />"))
                                    </div>
                                </div>
                            </div>
                        }
                    </ModalBody>
                    <ModalFooter>
                        Modal Footer
                    </ModalFooter>
                </Modal>
            }
            else
            {

                <Modal Class='@($"display-modal {VisibilityClass}")' Id="template-modal" Backdrop="Modal.BackdropOptions.False">
                    <ModalHeader>
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                        <button @onclick="Hide" type="button" class="btn-close" aria-label="Close"></button>

                    </ModalHeader>
                    <ModalBody>
                        <div class="row">
                            <div class="col">
                                Modal Variables: <br />
                            </div>
                        </div>

                        @foreach (var item in Variables.Where(v => v.SectionTitle == "modal"))
                        {
                            <div class="row">
                                <div class="col">
                                    @item.SectionTitle
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="d-flex flex-wrap">
                                        @((MarkupString)item.ToCssSection(false).Replace(";", ";<br />"))
                                    </div>
                                </div>
                            </div>
                        }
                    </ModalBody>
                </Modal>
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public List<ScssVariableSection> Variables { get; set; } = [];

    [Parameter]
    public List<ScssVariable> ColorSection { get; set; } = [];

    [Parameter]
    public List<ScssVariable> SelectedColors { get; set; } = [];

    [Parameter]
    public EventCallback<List<ScssVariable>> SelectedColorsChanged { get; set; }

    [Parameter]
    public bool HasFooter { get; set; }

    public string VisibilityClass { get; set; } = "d-contents";

    bool _visible = true;

    public string Id { get; set; } = "exampleModal";

    protected override async Task OnInitializedAsync()
    {
        Show();
        await base.OnInitializedAsync();
    }

    public void Show()
    {
        _visible = true;
        VisibilityClass = "d-contents";
    }

    public void Hide()
    {
        _visible = false;
        VisibilityClass = "d-none";
    }

    public void Toggle()
    {
        _visible = !_visible;
        VisibilityClass = _visible ? "d-contents" : "d-none";

    }

}
