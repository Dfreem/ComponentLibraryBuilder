@using Blibrary.Shared.Components.Modal
@using Blibrary.Shared.Models
@implements IDisplayComponentTemplate

<!-- Button trigger modal -->
<div class="container-fluid">
    <div class="row">
        <div class="col">
            @if (HasFooter)
            {

                <Modal Class='@($"display-modal {VisibilityClass}")' Id="template-modal" Backdrop="Modal.BackdropOptions.False">
                    <ModalHeader>
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                        <button @onclick="Hide" type="button" class="btn-close" aria-label="Close"></button>

                    </ModalHeader>
                    <ModalBody>
                        <div class="modal-title">Modal Body</div>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit</p>
                    </ModalBody>
                    <ModalFooter>
                        Modal Footer
                    </ModalFooter>
                </Modal>
            }
            else
            {

                <Modal Class='@($"display-modal {VisibilityClass}")' Id="template-modal" Backdrop="Modal.BackdropOptions.False">
                    <ModalHeader>
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                        <button @onclick="Hide" type="button" class="btn-close" aria-label="Close"></button>

                    </ModalHeader>
                    <ModalBody>
                        <div class="modal-title">Modal Body</div>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit</p>
                    </ModalBody>
                </Modal>
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public ScssVariableSection CurrentSection { get; set; } = default!;

    [Parameter]
    public List<ScssVariable> ColorSection { get; set; } = [];


    [Parameter]
    public bool HasFooter { get; set; }

    public string VisibilityClass { get; set; } = "d-contents";

    bool _visible = true;

    public string Id { get; set; } = "exampleModal";

    protected override async Task OnInitializedAsync()
    {
        Show();
        await base.OnInitializedAsync();
    }

    public void Show()
    {
        _visible = true;
        VisibilityClass = "d-contents";
    }

    public void Hide()
    {
        _visible = false;
        VisibilityClass = "d-none";
    }

    public void Toggle()
    {
        _visible = !_visible;
        VisibilityClass = _visible ? "d-contents" : "d-none";

    }

}
