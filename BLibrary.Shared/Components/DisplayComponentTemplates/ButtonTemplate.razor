@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Extensions.AppExtensions
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Wacton.Unicolour
@inject IColorVariantService _variantService

<div class="container">
    <div class="row">
        <h2> Available Button Colors </h2>
        <div class="col-12">
            <div class="d-flex w-100 justify-content-evenly">
                @foreach (var color in _variantService.ColorSection)
                {
                    if (_variantService.CurrentSection.ColorVariations.Any(v => v.Key == color.Key))
                    {
                        <button class="btn text-nowrap disabled" @key="@color.Key" style="@ButtonStyle(color)">
                            @color.Value
                        </button>
                    }
                    else
                    {

                        <button @key="@color.Value" @onclick="(() => AddColor(color))" class="btn text-nowrap" style="@ButtonStyle(color)">
                            @color.Value
                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<ScssVariableSection> Variables { get; set; } = [];

    [Parameter]
    public EventCallback<List<ScssVariableSection>> VariablesChanged { get; set; }

    [Parameter]
    public EventCallback<(string Key, bool Value)> CheckRule { get; set; }

    protected override void OnInitialized()
    {
        _variantService.OnSelectionChanged += async (sender, args) => await InvokeAsync(StateHasChanged);
        base.OnInitialized();
    }

    protected string BgColorToTextColor(string hexColor)
    {
        Unicolour color = new(hexColor);
        var inverseColor = color.GetCompliment();
        return inverseColor.Hex;
    }

    public void RemoveColor(ScssVariable color)
    {
        _variantService.UnSelectColor(color);
    }

    public void AddColor(ScssVariable color)
    {
        _variantService.SelectColor(color);
    }

    private string ButtonStyle(ScssVariable color)
    {
        string colorStyle = $"background-color: {color.Value}; color: {BgColorToTextColor(color.Value)}";
        return colorStyle;
    }

    private string ColorName(ScssVariable color)
    {
        Unicolour unicolour = new(color.Value);
        return unicolour.Description;
    }

}
