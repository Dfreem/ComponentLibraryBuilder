@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Wacton.Unicolour
@implements IDisplayComponentTemplate
@inject ISassCompilationService _variantService

<div class="container">
    <div class="row">
        <h2> Available Button Colors </h2>
        <div class="col-10 align-self-center">
            <div class="d-flex justify-content-center gap-1">
                @foreach (var color in _variantService.ColorSection)
                {

                    <button @key="@color.Value" class="btn text-nowrap" style="@ButtonStyle(color)">
                        @color.Value
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ScssVariableSection CurrentSection { get; set; } = default!;

    [Parameter]
    public List<ScssVariable> ColorSection { get; set; } = [];

    protected override void OnInitialized()
    {
        _variantService.OnSelectionChanged += async (sender, args) => await InvokeAsync(StateHasChanged);
        base.OnInitialized();
    }

    protected string BgColorToTextColor(string hexColor)
    {
        Unicolour color = new(hexColor);
        var inverseColor = color.GetCompliment();
        return inverseColor.Hex;
    }

    public void RemoveColor(ScssVariable color)
    {
        _variantService.UnSelectColor(color);
    }

    public void AddColor(ScssVariable color)
    {
        _variantService.SelectColor(color);
    }

    private string ButtonStyle(ScssVariable color)
    {
        var textColor = BgColorToTextColor(color.Value);
        string colorStyle = $"background-color: {color.Value}; color: {textColor}; border-color: {textColor}";
        return colorStyle;
    }

    private string ColorName(ScssVariable color)
    {
        Unicolour unicolour = new(color.Value);
        return unicolour.Description;
    }

}
