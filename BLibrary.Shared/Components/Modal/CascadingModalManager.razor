@using Blibrary.Shared.DTO
@using Blibrary.Shared.Extensions
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.Extensions.Logging
@inject ILogger<CascadingModalManager> _logger
@inject IJSRuntime _js

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public string Active { get; set; } = "";

    public Dictionary<string, IModal> Children = [];

    public bool Visible { get; private set; }

    public event EventHandler<ModalEventArgs>? ModalEvent;

    /// <summary>
    /// A child modal should call this method to register with the parent Modal Manager. <br />
    /// The child modal must be registered with this parent manager in order to function within the app.
    ///  </summary>
    /// <param name="modal"></param>
    public void AddChild(IModal modal)
    {
        if (!Children.TryAdd(modal.Id, modal))
        {
            _logger.LogError("\nattempted to add a duplicate key to the Modal dictionary\n{modalId}\n\n", modal.Id);
        }
        else
        {
            _logger.LogInformation("\nadding modal child to manager {modal}\n", modal.Id);
            Active = modal.Id;
        }

    }

    public void RemoveChild(IModal modal)
    {
        if (Visible)
            Hide().GetAwaiter();
        if (Children.ContainsKey(modal.Id))
            Children.Remove(modal.Id);
        if (Active == modal.Id)
        {
            Active = Children.Keys.FirstOrDefault() ?? "";
        }
    }

    // public void SwitchModalContent(string modalId)
    // {
    //     if (!Children.ContainsKey(modalId))
    //     {
    //         _logger.LogWarning("Modal manger was unable to find modal id, {modalId}. Make sure the modal impliments IModal and that it calls `AddChild` on the CascadingModalManager", modalId);
    //         return;
    //     }
    //     if(Active != modalId)
    //         Active = modalId;
    // }

    public async Task Show(string? modalId = null)
    {
        if (modalId is not null)
        {
            // only hide if we need to switch content and we are currently showing the modal
            if (Visible)
                await Hide();

            if (Children.ContainsKey(modalId))
                Active = modalId;
            else
                _logger.LogWarning("modal id was not found in ModalManager's Children");
        }
        // use event if not using js
        if (Children[Active].NoJS)
        {

            ModalEventArgs args = new()
                {
                    Id = Active,
                    Show = true
                };
            ModalEvent?.Invoke(this, args);
        }
        else
        {
            await _js.ShowModal(Children[Active].ModalRef);
        }
        Visible = true;
    }

    public async Task Hide()
    {
        if (Visible)
        {
            if (Children[Active].NoJS)
            {

                ModalEventArgs args = new()
                    {
                        Id = Active,
                        Show = false
                    };
                ModalEvent?.Invoke(this, args);
            }
            await _js.HideModal(Children[Active].ModalRef);
            Visible = false;
        }
    }

    public async Task Toggle(string? modalId = null)
    {
        if (Visible)
        {
            await Hide();

            // always toggle on the first time a new modal is activated.
            if (modalId is not null && modalId != Active)
            {
                Active = modalId;
                await Show();
            }
        }
        else
        {
            if (modalId is not null)
                Active = modalId;

            await Show(modalId);
        }
    }
}
