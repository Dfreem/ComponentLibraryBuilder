@using Blibrary.Client.Shared.Components.StylesForm
@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Wacton.Unicolour
@implements IFormContent
@inject IColorVariantService _variantService
@attribute [StreamRendering]

<div class="container-fluid">
    <div class="form-title">
        Selected Color Variations
    </div>
    <div class="row row-cols-3 form-body">
        <div class="col vh-100 border-end border-1 border-grey-900 justify-content-center">
            <div class="d-flex gap-1 flex-wrap">
                @foreach (var variation in _variantService.CurrentSection.ColorVariations.OrderBy(v => GetUnicolour(v.Value).DominantWavelength))
                {
                    <button type="button" @onclick="(() => _variantService.UnSelectColor(variation))" class="badge mb-1 shadow border border-1 border-grey-400" style="@GetSwatchStyle(variation.Value)">
                        @variation.Key
                    </button>
                }
            </div>
        </div>
        <div class="col scroll vh-100 border-end border-1 border-grey-900 justify-content-center">
            <div class="container-fluid">
                @foreach (var rule in _numbers)
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule" SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_variantService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
                @foreach (var rule in GetRemainingRules())
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule" SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_variantService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
            </div>
        </div>
        <div class="col scroll vh-100 border-end border-1 border-grey-900 justify-content-center">
            <div class="container-fluid">
                @foreach (var rule in _colors)
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule" SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_variantService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
                @foreach (var rule in _multiParts)
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule" SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_variantService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {

        [Parameter]
        public List<ScssVariableSection> Variables { get; set; } = new();

        [Parameter]
        public ScssVariableSection CurrentSection { get; set; } = new() { SectionTitle = "" };

        [Parameter]
        public EventCallback<(string Key, bool Value)> CheckRule { get; set; }

        [Parameter]
        public EventCallback<(string Key, string? Value)> SetRuleValue { get; set; }

        List<ScssVariable> _colors = [];
        List<ScssVariable> _numbers = [];
        List<ScssVariable> _multiParts = [];

        [Parameter]
        public EventCallback<string> CheckOptionsBox { get; set; }

    protected override void OnParametersSet()
    {
        _colors = CurrentSection.Rules.Where(r => r.InputType() == "color").ToList();
        _numbers = CurrentSection.Rules.Where(r => r.InputType() == "number").ToList();
        _multiParts = CurrentSection.Rules.Where(r => r.InputType().Contains("multi")).ToList();

        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _variantService.OnSelectionChanged += async (sender, args) =>
            {
                CurrentSection.ColorVariations = args.Colors;
                await InvokeAsync(StateHasChanged);
            };
        }
        base.OnAfterRender(firstRender);
    }

    private string GetSwatchStyle(string color)
    {
        var textColor = new Unicolour(color).GetCompliment();
        Console.WriteLine(textColor.Hex);
        string value = $"background-color: {color}; color: {textColor.Hex};";
        return value;
    }

    private List<ScssVariable> GetRemainingRules()
    {
        return CurrentSection.Rules.Where(r => 
            !_colors.Any(c => c.Key == r.Key) && 
            !_numbers.Any(n => n.Key == r.Key) && 
            !_multiParts.Any(m => m.Key == r.Key)
        ).ToList();
    }

    private Unicolour GetUnicolour(string value)
    {
        return new(value);
    }
}
