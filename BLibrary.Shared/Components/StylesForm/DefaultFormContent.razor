@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Microsoft.AspNetCore.Components.Forms
@using Wacton.Unicolour
@implements IFormContent
@inject ISassCompilationService _compilationService
@attribute [StreamRendering]

<div class="container-fluid">
    <div class="row row-cols-3 form-body">
        <div class="col scroll vh-100 border-end border-1 border-grey-900 justify-content-center">
            <CompilationMenu AllSections="AllSections" />
        </div>
        <div class="col scroll vh-100 border-end border-1 border-grey-900 justify-content-center">
            <div class="container-fluid">
                @foreach (var rule in _numbers)
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule" SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 SetUnitValue="(async(u) => await SetUnitValue.InvokeAsync((u.Item1, u.Item2)))"
                                 ColorSection="_compilationService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
                @foreach (var rule in GetRemainingRules())
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule"
                                 SetUnitValue="(async(u) => await SetUnitValue.InvokeAsync((u.Item1, u.Item2)))"
                                 SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_compilationService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
            </div>
        </div>
        <div class="col scroll vh-100 border-end border-1 border-grey-900 justify-content-center">
            <div class="container-fluid">
                @foreach (var rule in _colors)
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 SetUnitValue="(async(u) => await SetUnitValue.InvokeAsync((u.Item1, u.Item2)))"
                                 Rule="rule" SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_compilationService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
                @foreach (var rule in _multiParts)
                {
                    <div class="row mb-1">

                        <FormRow @key="rule"
                                 Rule="rule"
                                 SetUnitValue="(async(u) => await SetUnitValue.InvokeAsync((u.Item1, u.Item2)))"
                                 SetRuleValue="async (args) => await SetRuleValue.InvokeAsync((args.Item1, args.Item2))"
                                 ColorSection="_compilationService.ColorSection"
                                 IsChecked="rule.IsChecked"
                                 IsCheckedChanged="(async (args) => await CheckRule.InvokeAsync((rule.Key, args)))" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {


    [Parameter]
    public ScssVariableSection CurrentSection { get; set; } = new() { SectionTitle = "" };

    [Parameter]
    public List<ScssVariableSection> AllSections { get; set; } = [];

    [Parameter]
    public EventCallback<(string Key, bool Value)> CheckRule { get; set; }

    [Parameter]
    public EventCallback<(string Key, string? Value)> SetRuleValue { get; set; }

    [Parameter]
    public EventCallback<(string Key, string? Value)> SetUnitValue { get; set; }

    List<ScssVariable> _colors = [];
    List<ScssVariable> _numbers = [];
    List<ScssVariable> _multiParts = [];

    [Parameter]
    public EventCallback<string> CheckOptionsBox { get; set; }

    protected override void OnParametersSet()
    {
        _colors = CurrentSection.Rules.Where(r => r.InputType() == "color").ToList();
        _numbers = CurrentSection.Rules.Where(r => r.InputType() == "number").ToList();
        _multiParts = CurrentSection.Rules.Where(r => r.InputType().Contains("multi")).ToList();

        base.OnParametersSet();
    }

    protected override async Task OnInitializedAsync()
    {
        _compilationService.OnSelectionChanged += async (sender, args) =>
        {
            
            await InvokeAsync(StateHasChanged);
        };
        await base.OnInitializedAsync();
    }


    private List<ScssVariable> GetRemainingRules()
    {
        return CurrentSection.Rules.Where(r =>
            !_colors.Any(c => c.Key == r.Key) &&
            !_numbers.Any(n => n.Key == r.Key) &&
            !_multiParts.Any(m => m.Key == r.Key)
        ).ToList();
    }

    private Unicolour GetUnicolour(string value)
    {
        return new(value);
    }
}
