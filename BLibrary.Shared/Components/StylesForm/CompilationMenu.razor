@using Blibrary.Shared.Components.Card
@using Blibrary.Shared.Components.Icon
@using Blibrary.Shared.Enums.Icon
@using Blibrary.Shared.Enums.Style
@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Microsoft.AspNetCore.Components.Forms
@using Wacton.Unicolour
@using Blibrary.Shared.Components.Form
@using static Blibrary.Shared.Enums.Style.HTMLHeading
@inject ISassCompilationService _sassCompilationService

<div class="container-fluid">
    <div class="row">
        <div class="fs-18pt mb-3">Theme Colors</div>
    </div>
    @foreach (var key in _sassCompilationService.PrimaryColorMap.Keys)
    {
        <div class="row mb-2">
            <div class="col">
                <ToggleSwitch Key="@key" @bind-Value='_colorStatus[key]' />
            </div>
            <div class="col">
                <ColorInput ColorVariableDropdown="_sassCompilationService.ColorSection"
                            Disabled="!_colorStatus[key]"
                            Key="@key"
                            @bind-Value='_sassCompilationService.PrimaryColorMap[key]' />
            </div>
        </div>
    }

    <div class="row mb-2">
        <div class="col">
            <a class="link icon-link" @onclick='PlusIconClick'>
                <Icon IconName="IconFontAwesome.FaPlusCircle"
                      FontSize="FontSize.FS34"
                      Color="BootstrapColor.Success"
                      IconSet="Enums.UI.IconSet.FontAwesomeSolid" />
            </a>
        </div>
        <div class="col">
            @if (AddingThemeColor)
            {
                <div class="d-flex w-100 justify-content-between">
                    <input @bind-value='NewColor.ColorName' type="text" class="form-control form-control-plaintext" />
                    <a @onclick='AddThemeColor' class="icon-link">
                        <Icon IconName="IconFontAwesome.FaCheckSquare"
                              FontSize="FontSize.FS30"
                              IconSet="Enums.UI.IconSet.FontAwesomeSolid"
                              Color="BootstrapColor.Success" />
                    </a>
                </div>
                <div class="d-flex w-100 justify-content-between">

                    @if (_invalid)
                    {
                        <div class="text-danger">
                            Variable must have a name
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <hr />
    @foreach (var item in AllSections)
    {
        <div class="row">
            <div class="col">
                <div class="form-check">
                    <label class="form-check-label">
                        @item.SectionTitle
                    </label>
                    <input @key='@item' checked="@item.Compile" type="checkbox" class="form-check-input" @onchange='(() => EnableDisableCompilation(item))' />
                </div>
            </div>
            
        </div>
    }
</div>
@code {

    [Parameter]
    public List<ScssVariableSection> AllSections { get; set; } = [];

    private Dictionary<string, bool> _colorStatus = [];

    bool _invalid;

    public bool AddingThemeColor { get; set; }

    public class ThemeColorFormModel
    {
        public string ColorName { get; set; } = "";
        public string ColorValue { get; set; } = "";
    }

    public ThemeColorFormModel NewColor { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        _sassCompilationService.OnSelectionChanged += async (sender, args) =>
        {
            await InvokeAsync(StateHasChanged);
        };
        _colorStatus = _sassCompilationService.PrimaryColorMap.Keys.ToList().ToDictionary(c => c, c => false);
        return base.OnInitializedAsync();
    }

    private string GetSwatchStyle(string color)
    {
        var textColor = new Unicolour(color).GetCompliment();
        string value = $"background-color: {color}; color: {textColor.Hex};";
        return value;
    }

    private void EnableDisableCompilation(ScssVariableSection section)
    {
        _sassCompilationService.EnableDisableCompilationFor(section.SectionTitle);
        section.Compile = !section.Compile;
    }

    private async Task AddAllColors()
    {
        _sassCompilationService.SelectAllColors();
        await InvokeAsync(StateHasChanged);
    }

    private void PlusIconClick()
    {
        AddingThemeColor = true;
    }

    private async Task AddThemeColor()
    {
        if (NewColor.ColorName.Length == 0)
        {
            _invalid = true;
        }
        else
        {

            _sassCompilationService.PrimaryColorMap.Add(NewColor.ColorName, "#ffffff");
            _colorStatus.Add(NewColor.ColorName, true);
            AddingThemeColor = false;
            _invalid = false;
        }
        await InvokeAsync(StateHasChanged);
    }

}
