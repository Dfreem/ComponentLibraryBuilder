@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Blibrary.Shared.Services.ToastService
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using System.Diagnostics
@inject ILogger<StylesForm> _logger
@inject IJSRuntime _js
@inject IToastService _toast
@inject ISassCompilationService _styleService
@inject SassClient _sassClient

<div class="form-container bottom-panel">
    <div class="form-header">
        <div class="row pb-2">
            <div class="col justify-content-center d-flex align-items-end">

                <div class="form-title">
                    Current Stylesheet Section @CurrentSection.SectionTitle
                </div>
            </div>
            <div class="col justify-content-center d-flex align-items-end">
                <div class="card-subtitle">
                    Select a Section To Customize
                </div>
                <select value="@CurrentSection.SectionTitle" @onchange="(async(v) => await SelectSection(v))" class="form-select">
                    <option value="">Select a Section</option>
                    @foreach (var varSection in Sections)
                    {
                        <option value="@varSection.SectionTitle">@varSection.SectionTitle</option>
                    }
                </select>
            </div>

            <div class="col d-flex align-items-end">
                <div class="btn-toolbar gap-1 justify-content-start">
                    <div class="btn-group">
                        <button @onclick="GenerateFile" class="btn btn-success">Create Stylesheet</button>
                    </div>
                    @if (ToolbarButtons is not null)
                    {
                        <div class="btn-group">
                            @ToolbarButtons
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <EditForm OnSubmit="GenerateFile" Model="this">
        @if (SelectedComponentType is not null)
        {
            <DynamicComponent Type="SelectedComponentType" Parameters="DynamicMetadata" />

        }
    </EditForm>
</div>
<FileDownloader @ref='_fileDownloader'></FileDownloader>
@code {
    [Parameter]
    public List<ScssVariableSection> Sections { get; set; } = new();

    [Parameter]
    public EventCallback<List<ScssVariableSection>> SectionsChanged { get; set; }

    [Parameter]
    public ScssVariableSection CurrentSection { get; set; } = new() { SectionTitle = "" };

    [Parameter]
    public EventCallback<ScssVariableSection> CurrentSectionChanged { get; set; }

    [Parameter]
    public RenderFragment? ToolbarButtons { get; set; }

    public Dictionary<string, Object> DynamicMetadata { get; set; } = [];

    public Type? SelectedComponentType { get; set; } = typeof(DefaultFormContent);


    FileDownloader _fileDownloader = new();

    protected override async Task OnParametersSetAsync()
    {
        DynamicMetadata = new()
        {
            ["CheckRule"] = EventCallback.Factory.Create<(string Key, bool Value)>(this, CheckRule),
            ["SetRuleValue"] = EventCallback.Factory.Create<(string Key, string Value)>(this, SetRuleValue),
            ["SetUnitValue"] = EventCallback.Factory.Create<(string Key, string Value)>(this, SetUnitValue),
            ["CheckOptionsBox"] = EventCallback.Factory.Create<string>(this, CheckOptionBox),
            ["AllSections"] = Sections,
            ["CurrentSection"] = CurrentSection,
        };
        await base.OnParametersSetAsync();
    }

    private async Task SelectSection(ChangeEventArgs args)
    {
        var sectionTitle = args.Value?.ToString();
        SelectedComponentType = typeof(DefaultFormContent);
        CurrentSection = Sections.FirstOrDefault(s => s.SectionTitle == sectionTitle) ?? new();
        await CurrentSectionChanged.InvokeAsync(CurrentSection);
        await InvokeAsync(StateHasChanged);
    }

    private async Task CheckRule((string key, bool isChecked) args)
    {
        var rule = CurrentSection.Rules.Find(r => r.Key == args.key);
        if (rule is null)
        {
            _logger.LogError("rule was not found in Current Section\n {key}", args.key);
            return;
        }
        rule.IsChecked = args.isChecked;
        if (!args.isChecked)
            rule.ResetToPrevious();


        if (!CurrentSection.Compile && args.isChecked)
        {
            CurrentSection.Compile = true;
        }

        await CurrentSectionChanged.InvokeAsync(CurrentSection);
        await SectionsChanged.InvokeAsync(Sections);
    }

    private async Task GenerateFile()
    {
        // string fileContent = VarCompilationoCss();
        using var fileContent = await _sassClient.Compile(Sections, _styleService.SelectedColors, _styleService.PrimaryColorMap);
        if (fileContent is not null)
        {
            await _fileDownloader.DownloadFile(fileContent, "custom", "css");
            _toast.Success("successfully test saved");
        }
        else
        {
            _toast.Error("Unable to compile sass file");
        }
    }

    private async Task SetRuleValue((string key, string? value) args)
    {
        if (args.value is null)
            return;
        ScssVariable? rule = null;
        rule = CurrentSection.Rules.Find(r => r.Key == args.key);

        if (rule is not null && rule.IsChecked)
        {
            rule!.Value = args.value.Trim();
        }
        await CurrentSectionChanged.InvokeAsync(CurrentSection);
    }

    private async Task SetUnitValue((string key, string? value) args)
    {
        if (args.value is null)
            return;
        var rule = CurrentSection.Rules.FirstOrDefault(r => r.Key == args.key);
        if (rule is not null && rule.IsChecked)
        {
            rule!.Unit = args.value;
        }

        await CurrentSectionChanged.InvokeAsync(CurrentSection);
    }

    private void CheckOptionBox(string key)
    {
        var rule = CurrentSection.Rules.FirstOrDefault(r => r.Key == key);
        if (rule is null)
        {
            _logger.LogError("unable to find variable key in current section, {key}", key);
            return;
        }
        rule.IsChecked = !rule.IsChecked;
        rule.Value = rule.IsChecked.ToString().ToLower();
    }

    public async Task RemoveVariant(string colorKey)
    {
        CurrentSection.ColorVariations.RemoveAll(c => c.Key == colorKey);
        DynamicMetadata["CurrentSection"] = CurrentSection;
        await CurrentSectionChanged.InvokeAsync(CurrentSection);
    }
}
