@using System.Text
@using Blibrary.Shared.Components.Form
@using Microsoft.AspNetCore.Components.Forms
@using Blibrary.Shared.Enums
@using Blibrary.Shared.Helpers
@inherits InputBase<string>

<div class=" d-flex shadow-input">
    <div class="input-group">

        @for (int i = 0; i < NumberOfUnits; i++)
        {
            int currentIndex = i;
            <input disabled="@(Disabled)"
                   @key='@(currentIndex.ToString() + "-number")'
                   type="number"
                   class="form-control"
                   value="@_unitSections[currentIndex]"
                   @oninput='(async (v) => await SetRuleValue(currentIndex, v.Value?.ToString() ?? ""))' />
        }
        <input disabled="@(Disabled)" type="color" value="@_color" @key="@(NumberOfUnits + "-color")" @oninput='(async (args) => await SetColorSection(args.Value?.ToString() ?? ""))' class="@(Class + " form-control-color w-100")" />

    </div>
</div>


@code {

    [Parameter]
    public int NumberOfUnits { get; set; }

    string[] _unitSections = [];
    string _color = "";

    // [Parameter]
    // public bool Range { get; set; }

    protected override void OnInitialized()
    {
        for (int i = 0; i < NumberOfUnits; i++)
        {
            _unitSections = _unitSections.Append("0").ToArray();
        }
        base.OnInitialized();
    }


    private async Task SetRuleValue(int index, string value)
    {
        _unitSections[index] = value;
        Value = BuildRuleValue();
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task SetColorSection(string value)
    {
        _color = value;
        Value = BuildRuleValue();
        await ValueChanged.InvokeAsync(Value);
    }

    private string BuildRuleValue()
    {
        StringBuilder builder = new();
        for (int i = 0; i < NumberOfUnits; i++)
        {
            builder.Append(_unitSections[i] + "px ");
        }
        builder.Append(_color);

        return builder.ToString().Trim();

    }
}
