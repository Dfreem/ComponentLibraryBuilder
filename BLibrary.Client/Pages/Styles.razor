@page "/"
@using Blibrary.Shared.Components.StylesForm
@using Blibrary.Shared.Models
@using Blibrary.Shared.Services.CMSServices
@using Microsoft.AspNetCore.Components.Sections
@using Serilog
@using Blibrary.Shared.Components.Accordion
@using Blibrary.Shared.Components.Card
@using Blibrary.Shared.Components.DisplayComponentTemplates
@inject SassClient _sassClient
@inject IJSRuntime _js
@inject ISassCompilationService _compilationService

@attribute [StreamRendering]

@if (PreviewStyles is not null)
{
    <style>
        @PreviewStyles
    </style>
}


<div class="container-fluid">
    <div class="row">
        <div class="col">
            @if (CurrentTemplateType is not null)
            {
                if (CurrentTemplateType == typeof(ModalTemplate))
                {
                    <ModalTemplate @ref="TemplateModal" ColorSection="_compilationService.ColorSection" CurrentSection="CurrentSection" />
                }
                else
                {
                    <DynamicComponent Type="CurrentTemplateType" Parameters="DynamicParams" />

                }
            }
        </div>
    </div>
</div>
<StylesForm CurrentSection='CurrentSection' CurrentSectionChanged="UpdateCurrentSection" @bind-Sections='Variables'>
    <ToolbarButtons>
        @if (CurrentTemplateType == typeof(ModalTemplate))
        {
            <button class="btn btn-primary" @onclick='(() => TemplateModal?.Toggle())'>
                Toggle Modal
            </button>
        }
    </ToolbarButtons>
</StylesForm>

@code {

    public Dictionary<string, Type> ComponentTypes { get; set; } = new()
    {
       { "modal", typeof(ModalTemplate)},
       { "accordion", typeof(AccordionTemplate)},
       { "card", typeof(CardTemplate)},
       {"buttons", typeof(ButtonTemplate)}
    };

    public ModalTemplate? TemplateModal { get; set; }

    public Dictionary<string, Object> DynamicParams { get; set; } = [];

    public Type? CurrentTemplateType { get; set; }
    public Type? CurrentFormType { get; set; }

    public List<ScssVariableSection> Variables { get; set; } = new();

    public ScssVariableSection CurrentSection { get; set; } = new();

    public string? PreviewStyles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await _sassClient.GetVariableCollectionAsync();

        if (response is not null)
        {
            if (response.Sections.Count > 0)
                Variables = response.Sections.Where(v => !v.IsMap).ToList();

            _compilationService.ColorSection = response.ColorSection.Rules;
        }

        DynamicParams.Add("CurrentSection", CurrentSection);
        DynamicParams.Add("ColorSection", _compilationService.ColorSection);

        await base.OnInitializedAsync();
    }

    public Type? GetTemplateType()
    {
        return CurrentSection.SectionTitle switch
        {
            var current when current.ToLower().Contains("modal") => ComponentTypes["modal"],
            var current when current.ToLower().Contains("accordion") => ComponentTypes["accordion"],
            var current when current.ToLower().Contains("buttons") => ComponentTypes["buttons"],
            var current when current.ToLower().Contains("card") => ComponentTypes["card"],
            _ => null
        };
    }

    public Type GetFormType()
    {
        // form content Component Type can be dynamically selected.
        // currently the only form content Component needed is the DefaultFormContent Component
        return CurrentSection.SectionTitle switch
        {
            _ => typeof(DefaultFormContent)
        };
    }

    public async Task UpdateCurrentSection(ScssVariableSection currentSection)
    {
        // TODO change checkboxes when content changes
        CurrentSection = currentSection;
        DynamicParams["CurrentSection"] = CurrentSection;
        CurrentTemplateType = GetTemplateType();
        if (CurrentTemplateType == typeof(ModalTemplate) && TemplateModal is null)
        {
            TemplateModal = new();
        }
        PreviewStyles = currentSection.ToCssSection();

        Log.Information("Currently Editting \n{previewingRootSection}", PreviewStyles);
        await InvokeAsync(StateHasChanged);
    }

}

