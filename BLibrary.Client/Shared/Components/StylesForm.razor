@using Blibrary.Shared.Extensions
@using Blibrary.Shared.Models
@inject ILogger<StylesForm> _logger

<div class="form-container">
    <EditForm OnSubmit="GenerateFile" Model="this">
        <div class="form-header">
            <div class="row mb-2">

                <div class="form-title col-auto">
                    Current Stylesheet Section @CurrentSection.SectionTitle
                </div>
                <div class="col">
                    <div class="d-flex">
                        <button type="submit" class="btn btn-success">Create Stylesheet</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-body scroll">
            <div class="form-row row-cols-2 row">
                <div class="card-subtitle col fs-5">
                    Select a Section To Customize
                </div>
                <div class="col">
                    <select value="@CurrentSection.SectionTitle" @onchange="(async(v) => await SelectSection(v))" class="form-select">
                        <option value="-1">Select a Section</option>
                        @foreach (var varSection in Variables)
                        {
                            <option value="@varSection.SectionTitle">@varSection.SectionTitle</option>
                        }
                    </select>
                </div>
            </div>
            @foreach (var rule in CurrentSection.Rules)
            {
                <div class="row row-cols-3 form-row">
                    @if (rule.InputType() == string.Empty)
                        continue;
                    <div class="col-5">
                        <label class="fw-medium">@rule.Key.KabobToTitleCase()</label>
                    </div>
                    <div class="col-1 justify-content-center">
                        @if (rule.InputType() != "checkbox")
                        {

                            <div class="form-check">
                                @* <label class="form-check-label"></label> *@
                                @* <input class="form-check-input" type="checkbox" step="0.1" value="@rule.IsChecked" @onchange="(async (v) => await CheckRule(rule.Key, !rule.IsChecked))" /> *@
                                <InputCheckbox ValueExpression='(() => rule.IsChecked)'
                                               ValueChanged="(async (v) => await CheckRule(rule.Key, v))"
                                               class="form-check-input" />

                            </div>
                        }
                    </div>

                    <div class="col-6 justify-content-center flex-nowrap d-flex">
                        @switch (rule.InputType())
                        {
                            case var multi when rule.InputType().Contains("multi"):
                                int numSections = Convert.ToInt32(multi.Replace("multi-", "").Trim());
                                <ShadowInput NumberOfUnits="numSections" Rule="@rule" RuleChanged="(async (r) => await SetRuleValue(r.Key, r.Value))" />
                                break;
                            case "color":
                                var colorVariables = Variables.FirstOrDefault(v => v.SectionTitle == "color-variables")?.Rules ?? [];
                                <ColorInput @key='rule.Key' ColorVariableDropdown="colorVariables" Rule="rule" RuleChanged="(async (r) => await SetRuleValue(r.Key, r.Value))"></ColorInput>
                                break;
                            case var _ when rule.InputType() == "number" || rule.InputType() == "range":
                                <NumberUnitInput Rule="rule" RuleChanged="(async (a) => await SetRuleValue(rule.Key, a.Value?.ToString()))" />
                                break;
                            case "checkbox":
                                <ToggleSwitch Value="@rule.IsChecked" ValueChanged="((v) => CheckOptionBox(rule.Key))" />
                                break;
                            default:
                                <input class="form-control" type="@rule.InputType()" value="@rule.Value" @onchange='(async (a) => await SetRuleValue(rule.Key, a.Value?.ToString() ?? ""))' />
                                break;
                        }
                    </div>
                </div>
            }
        </div>
    </EditForm>
</div>
<FileDownloader @ref='_fileDownloader'></FileDownloader>
@code {
    [Parameter]
    public List<ScssVariableSection> Variables { get; set; } = new();

    [Parameter]
    public EventCallback<List<ScssVariableSection>> VariablesChanged { get; set; }

    [Parameter]
    public ScssVariableSection CurrentSection { get; set; } = new();

    [Parameter]
    public EventCallback<ScssVariableSection> CurrentSectionChanged { get; set; }

    private Dictionary<string, string> ColorVariableDropdown = [];

    FileDownloader _fileDownloader = new();

    protected override async Task OnInitializedAsync()
    {
        // pre-defined colors names and hex codes for dropdown
        var colorVariables = Variables.Where(v => v.SectionTitle.Contains("color-variables"));
        ColorVariableDropdown = colorVariables.SelectMany(c => c.Rules).OrderBy(r => r.Key).ToDictionary(v => v.Key, v => v.Value);
        await base.OnInitializedAsync();
    }

    private async Task SelectSection(ChangeEventArgs args)
    {
        var sectionTitle = args.Value?.ToString();
        CurrentSection = Variables.FirstOrDefault(s => s.SectionTitle == sectionTitle) ?? new();
        await CurrentSectionChanged.InvokeAsync(CurrentSection);
    }

    private async Task CheckRule(string key, bool isChecked)
    {
        var rule = CurrentSection.Rules.Find(r => r.Key == key);
        if (rule is null)
        {
            _logger.LogError("rule was not found in Current Section\n {key}", key);
            return;
        }
        rule.IsChecked = isChecked;
        if (!isChecked)
            rule.ResetToPrevious();
        await CurrentSectionChanged.InvokeAsync(CurrentSection);

        await VariablesChanged.InvokeAsync(Variables);
    }

    private async Task GenerateFile()
    {
        string fileContent = Variables.ToCss();
        await _fileDownloader.DownloadFile(fileContent, "custom", "css");

        // _toast.Success("successfully test saved");
    }

    private async Task SetRuleValue(string key, string? value, bool isCommonVariable = false)
    {
        if (value is null)
            return;
        ScssVariable? rule = null;
        rule = CurrentSection.Rules.Find(r => r.Key == key);

        if (rule is not null && rule.IsChecked)
        {
            rule!.Value = value.Trim();
        }
        await CurrentSectionChanged.InvokeAsync(CurrentSection);
    }

    private async Task SetUnitValue(string key)
    {
        // if (unit is null)
        //     return;
        // var rule = CurrentSection.Rules.FirstOrDefault(r => r.Key == key);
        // if (rule is not null && rule.IsChecked)
        // {
        //     rule!.Unit = unit;
        // }

        await CurrentSectionChanged.InvokeAsync(CurrentSection);
    }

    private void CheckOptionBox(string key)
    {
        var rule = CurrentSection.Rules.FirstOrDefault(r => r.Key == key);
        if (rule is null)
        {
            _logger.LogError("unable to find variable key in current section, {key}", key);
            return;
        }
        rule.IsChecked = !rule.IsChecked;
        rule.Value = rule.IsChecked.ToString().ToLower();
    }
}
